<?php
namespace AdminBundle\Admin;
use AppBundle\Entity\Reservation;
use Doctrine\DBAL\Types\DecimalType;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Route\RouteCollection;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
final class ReservationAdmin extends AbstractAdmin
{
    #protected $parentAssociationMapping = 'reservation';
    protected function configureRoutes(RouteCollection $collection)
    {
        if($this->isChild()){
            return;
        }
        // This is the route configuration as a parent
        $collection->clearExcept(['list']);

    }
    public function toString($object)
    {
        return $object instanceof Reservation
            ? $object->getRandomCodeCommande()
            : 'Réservation'; // shown in the breadcrumb on the create view
    }
    protected function configureFormFields(FormMapper $formMapper)
    {
        $formMapper
            ->add('payment_transaction.status');

    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper->add('randomCodeCommande');
    }
    protected function configureShowFields(ShowMapper $show)
    {
        $show->with('Réservation',array('class'=>'col-md-6','box_class'   => 'box box-solid box-primary'))
                ->add('randomCodeCommande',null,['label'=>'Identifiant de la réservation','class'=>'badge badge-info'])
                ->add('nomReservation',null,['label'=>'Description','class'=>'badge badge-info'])
                ->add('montantTotal',null,['label'=>'Montant'])
                //->add('billet','collection',['label'=>'Billets'])
                ->add('dateReservation',null,['label'=>'Date de réservation'])
                ->add('modePaiement',null,['label'=>'Mode de paiement'])
            ->end()
            ->with('Transaction',array('class'=>'col-md-6','box_class'   => 'box box-solid box-warning','description'=>'Test'))
                ->add('payment_transaction.txnid',null,['label'=>'N° de transaction'])
                ->add('payment_transaction.currency',DecimalType::class,['label'=>'Devise'])
                ->add('payment_transaction.payment_method',null,['label' => 'Méthode de paiement'])
                ->add('payment_transaction.status',null,['label'=>'Etat du paiement'])
            ->end()
            ->with('Acheteur',array('class'=>'col-md-6','box_class'   => 'box box-solid box-info'))
                ->add('user_checkout.nom',null,['label'=>'Nom'])
                ->add('user_checkout.prenom',null,['label'=>'Prénom'])
                ->add('user_checkout.email', null, ['label'=>'E-mail'])
                ->add('user_checkout.adresse1', null, ['label'=>'Adresse'])
                ->add('user_checkout.adresse2', null, ['label'=>'Adresse 2'])
                ->add('user_checkout.zipCode', null, ['label'=>'Code région'])
                ->add('user_checkout.region', null, ['label'=>'Région'])
                ->add('user_checkout.pays', null, ['label'=>'Pays'])
            ->end()
            ;
        parent::configureShowFields($show); // TODO: Change the autogenerated stub
    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper->addIdentifier('randomCodeCommande', 'text', ['label' => 'Identifiant']);
        $listMapper
            ->add('evenement.titreEvenement', 'text', ['label' => 'Evènement'])
            ->add('montant_total','float',['Montant'])
            ->add('user_checkout.nom','text',['label'=>'Nom de l\'acheteur'])
            ->add('transaction.status',null,['label' => 'Etat de paiement'])
            ->add('createdAt', 'date', ['lable' => 'Date de création', 'format' => 'd-m-Y H:i:s']);
    }
}
