<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Billet;
use AppBundle\Entity\Evenement;
use AppBundle\Entity\TypeBillet;
use Doctrine\ORM\EntityRepository;
/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BilletRepository extends EntityRepository
{
    /** @function compter les tickets par Type de billets
     */
    public function getListTicketsByType(Evenement $event)
    {
        return $this->getEntityManager()->createQuery('SELECT count(tb) AS nombreBillets, tb.libelle
            from AppBundle:TypeBillet tb
            JOIN AppBundle:Billet b WITH b.typeBillet=tb.id
            LEFT JOIN AppBundle:Reservation res WITH res.id=b.reservation
            LEFT JOIN AppBundle:Evenement evt WITH evt.id=res.evenement
            WHERE evt.id= :idEvent
            GROUP BY tb.id
            ORDER BY tb.libelle DESC
            ')
            ->setParameter('idEvent',$event->getId())
            ->getResult();
    }
    /** @function compter les tickets VENDUS par Type de billets
     */
    public function getLeftTicketsByType(Evenement $event)
    {
        return $this->getEntityManager()->createQuery('SELECT count(tb) AS nombreBillets, tb.libelle, b.estVendu
            from AppBundle:TypeBillet tb
            JOIN AppBundle:Billet b WITH b.typeBillet=tb.id
            LEFT JOIN AppBundle:Reservation res WITH res.id=b.reservation
            LEFT JOIN AppBundle:Evenement evt WITH evt.id=res.evenement
            WHERE evt.id= :idEvent and b.estVendu=0
            GROUP BY tb.id 
            ORDER BY tb.libelle DESC
            ')
            ->setParameter('idEvent',$event->getId())
            ->getResult();
    }
    public function getAllEvents()
    {
        return $this->getEntityManager()->createQuery('SELECT e FROM AppBundle:Evenement e ORDER BY e.dateDebutEvent ASC')->getResult();

    }
    /** @function compter les tickets restants et vendus
    */
    public function countPurchasedTickets(Evenement $event){

            $queryBillet= $this->getEntityManager()->createQuery('SELECT count(tb.id) as billets,GROUP_CONCAT(DISTINCT b.estVendu) as estVendu 
            from AppBundle:TypeBillet tb
            JOIN AppBundle:Billet b WITH b.typeBillet=tb.id
            LEFT JOIN AppBundle:Reservation res WITH res.id=b.reservation
            LEFT JOIN AppBundle:Evenement evt WITH evt.id=res.evenement
            WHERE evt.id= :idEvent
            GROUP BY b.estVendu
            ORDER BY tb.libelle DESC')
            ->setParameter('idEvent',$event->getId())
            ->getScalarResult();
            $result=array();
            foreach ($queryBillet as $billet){
                if($billet['estVendu'] == 1)
                    $result['vendus']=$billet['billets'];
                elseif($billet['estVendu'] == 0)
                {
                    $result['restants']=$billet['billets'];
                }
            }
            return $result;
    }
    /** @function générer billets
     * TODO: Generation Identifiant pour billet
    */
    public function generateTickets($prix,$number,TypeBillet $typeBillet){
        $em=$this->getEntityManager();

        for($i=0;$i<$number;$i++)
        {
            $newTicket=new Billet();
            $newTicket->setEstVendu(0);
            $newTicket->setPrix($prix);
            $newTicket->setIdentifiant();
            $newTicket->setTypeBillet($typeBillet);
            //register to entityManager
            $em->persist($newTicket);
        }
    }
    public function getDataForDatatables(Evenement $event){
        $totalTickets=$this->getListTicketsByType($event);
        $resteTickets=$this->getLeftTicketsByType($event);
        $array_return=[];
        /**comparer les Types de billets et ajouter les billets restants*/
        foreach ($totalTickets as $typeTicket)
        {
            foreach ($resteTickets as $reste)
            {
                if($typeTicket['libelle'] ==$reste['libelle'])
                {
                    $typeTicket['reste_tickets'] = $reste['nombreBillets'];
                }
            }

        $array_return[]=$typeTicket;
        }
        return $array_return;
    }
}
