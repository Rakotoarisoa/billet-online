
.toolbar-vertical[data-v-59929957] {
    position: fixed;
    top: 50px;
    width: 10%;
    left: 0;
    background-color: #333333;
    margin: 0;
    padding-top: 10px;
    padding-bottom: 6px;
    padding-left: 12px;
    border-radius: 0 0 6px 0;
    z-index: 1;
}


#sidebar-right[data-v-beb5f8a8] {
    background-color: #0b2e13;
}



/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/