# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value
    sonata.admin.security.mask.builder.class: Sonata\AdminBundle\Security\Acl\Permission\MaskBuilder

services:
    security.acl.permission.map:
        class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap
    # default configuration for services in *this* file
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        public:    false
        arguments:
            - 'mysql:dbname=%database_name%; host=%database_host%; port=%database_port%'
            - { db_table: 'sessions', db_username: '%database_user%', db_password: '%database_password%' }
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false
    app.form.flow.create_event:
        class: AppBundle\Form\CreateEventFormFlow
        autoconfigure: true
        public: true
    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Tests}'
    service.payment.orange_money.api:
        class: AppBundle\Utils\OmApi
        arguments:
            - '@service_container'
        autoconfigure: true
        public: true

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']
    # use the fully-qualified class name as the service id
    AppBundle\Utils\Slugger:
        public: false
    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    AppBundle\Controller\RegistrationController:
        arguments:
            $formFactory: '@fos_user.registration.form.factory'
    app.form.registration:
        class: AppBundle\Form\RegistrationType
        tags:
            - { name: form.type, alias: app_user_registration }

        # ...
    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }
    admin.billet:
        class: AdminBundle\Admin\BilletAdmin
        arguments: [~, AppBundle\Entity\Billet, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: ~
                label: Billet
    admin.payment_transaction:
        class: AdminBundle\Admin\PaymentTransactionAdmin
        arguments: [~, AppBundle\Entity\PaymentTransaction, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: ~
              label: Billet
    admin.typebillet:
        calls:
            - [ addChild, ['@admin.billet','typebillet'] ]
        class: AdminBundle\Admin\TypeBilletAdmin
        arguments: [~, AppBundle\Entity\TypeBillet, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: ~
                label: 'Type Billet'
    admin.evenementadmin:
        calls:
            - [ addChild, ['@admin.typebillet','evenement'] ]
        class: AdminBundle\Admin\EventAdmin
        arguments: [~, AppBundle\Entity\Evenement, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: 'app.admin.groups.event'
              label: 'Evènements'
              label_catalogue: 'SonataAdminBundle'
    admin.evenement:
        calls:
            - [ addChild, ['@admin.typebillet','evenement'] ]
            - [ addChild, ['@admin.reservation','evenement'] ]
        class: AdminBundle\Admin\EvenementAdmin
        arguments: [~, AppBundle\Entity\Evenement, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: ~
                label: 'Evènements'
                label_catalogue: 'SonataAdminBundle'
    admin.categorieevenement:
        class: AdminBundle\Admin\CategorieEvenementAdmin
        arguments: [~, AppBundle\Entity\CategorieEvenement, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: 'app.admin.groups.event'
                label: "Catégorie d'évènements"
                label_catalogue: 'SonataAdminBundle'
    admin.lieuevenement:
        class: AdminBundle\Admin\LieuEvenementAdmin
        arguments: [~, AppBundle\Entity\LieuEvenement, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: 'app.admin.groups.event'
                label: "Lieu d'évènement"
                label_catalogue: 'SonataAdminBundle'
    admin.reservation:
        class: AdminBundle\Admin\ReservationAdmin
        arguments: [~, AppBundle\Entity\Reservation, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: ~
              label: "Réservations"
              label_catalogue: 'SonataAdminBundle'
    admin.user_organizer:
        calls:
            - [ addChild, ['@admin.evenement','user'] ]
        class: AdminBundle\Admin\UserAdmin
        arguments: [~, AppBundle\Entity\User,~, 'ROLE_USER_MEMBER']
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: 'app.admin.groups.user' #'Utilisateurs et droits'
                label: "Organisateurs d' évènements"
                label_catalogue: 'SonataAdminBundle'
                icon: '<i class=\"fa fa-music\"></i>'
    admin.user_admin:
        calls:
        class: AdminBundle\Admin\UserAdmin
        arguments: [~, AppBundle\Entity\User, ~,'ROLE_SUPER_ADMIN']
        tags:
            - name: sonata.admin
              manager_type: orm
              group: 'app.admin.groups.user' #'Utilisateurs et droits'
              label: 'Administrateurs'
              label_catalogue: 'SonataAdminBundle'
              icon: '<i class=\"fa fa-user\"></i>'

    admin.user_shop:
        class: AdminBundle\Admin\UserAdmin
        arguments: [~,AppBundle\Entity\User,~,'ROLE_USER_SHOP']
        tags:
            - name: sonata.admin
              manager_type: orm
              group: 'app.admin.groups.user'
              label: "Gestionnaire de point de vente"
              label_catalogue: 'SonataAdminBundle'
    admin.user_checkout:
        class: AdminBundle\Admin\UserCheckoutAdmin
        arguments: [~,AppBundle\Entity\UserCheckout,~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: 'app.admin.groups.user'
              label: "Acheteurs"
              label_catalogue: 'SonataAdminBundle'
    admin.shop:
        class: AdminBundle\Admin\ShopAdmin
        arguments: [~, AppBundle\Entity\Shop, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: 'app.admin.groups.shop'
                label: 'Point de vente'
                label_catalogue: 'SonataAdminBundle'
    admin.pays:
        class: AdminBundle\Admin\PaysAdmin
        arguments: [~, AppBundle\Entity\Pays, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: 'app.admin.groups.config'
                label: 'Pays'
                label_catalogue: 'SonataAdminBundle'
    admin.devise:
        class: AdminBundle\Admin\DeviseAdmin
        arguments: [~, AppBundle\Entity\Devise, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: 'app.admin.groups.config'
                label: 'Devise'
                label_catalogue: 'SonataAdminBundle'
    admin.log:
        class: AdminBundle\Admin\LogAdmin
        arguments: [~, AppBundle\Entity\Log, ~]
        tags:
            -   name: sonata.admin
                manager_type: orm
                group: "app.admin.groups.log"
                label: "Journal d'activités"
                label_catalogue: 'SonataAdminBundle'
    admin.stats:
        class: AdminBundle\Admin\StatsAdmin
        arguments: [~, ~, AdminBundle\Controller\StatsCRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "app.admin.group.stats", on_top: true, label: Stats }
    sonata.block.service.recent_orders:
        class: AdminBundle\AdminBundle\Block\Service\RecentOrdersBlockService
        arguments:
            - "sonata.block.service.recent_orders"
            - "@templating"
            - "@doctrine.orm.entity_manager"
            - "@sonata.admin.pool"
        public: true
        tags:
            - { name: "sonata.block" }
    sonata.block.service.recent_tickets:
        class: AdminBundle\AdminBundle\Block\Service\RecentTicketsBlockService
        arguments:
            - "sonata.block.service.recent_tickets"
            - "@templating"
            - "@doctrine.orm.entity_manager"
            - "@sonata.admin.pool"
        public: true
        tags:
            - { name: "sonata.block" }
    sonata.block.service.recent_customers:
        class: AdminBundle\AdminBundle\Block\Service\RecentCustomersBlockService
        arguments:
            - "sonata.block.service.recent_customers"
            - "@templating"
            - "@doctrine.orm.entity_manager"
            - "@sonata.admin.pool"
        public: true
        tags:
            - { name: "sonata.block" }
    sonata.block.service.events_by_type_chart:
        class: AdminBundle\AdminBundle\Block\Service\EventsChartBlockByTypeService
        arguments:
            - "sonata.block.service.event_chart"
            - "@templating"
            - "@doctrine.orm.entity_manager"
            - "@sonata.admin.pool"
        public: true
        tags:
            - { name: "sonata.block" }
    sonata.block.service.events_by_place_chart:
        class: AdminBundle\AdminBundle\Block\Service\EventsChartBlockByPlaceService
        arguments:
            - "sonata.block.service.event_chart"
            - "@templating"
            - "@doctrine.orm.entity_manager"
            - "@sonata.admin.pool"
        public: true
        tags:
            - { name: "sonata.block" }
    app.manager.log:
        class: AppBundle\Manager\LogManager
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@translator"
    AppBundle\Events\DatabaseActivitySubscriber:
        tags:
            - { name: 'doctrine.event_subscriber' }
    AppBundle\Handler\SessionIdleHandler:
        arguments: ["@session", "@security.token_storage", "@router",'@doctrine.orm.entity_manager', %session_max_idle_time_remove_cart%,%session_max_idle_time%]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
    app.form_login_authenticator:
        class: AppBundle\Security\FormLoginAuthenticator
        arguments: ["@router", "@security.password_encoder"]
